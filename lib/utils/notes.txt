import 'package:cloud_firestore/cloud_firestore.dart';

// Une classe MessagesEFA avec tous les attributs non obligatoires
class MessagesEFA {
  // Les champs de la classe
  String? id; // L'ID du message, par défaut vide
  String? contenu; // Le contenu du message, par défaut vide
  String? expediteur; // L'email de l'expéditeur du message, par défaut vide
  String? destinataire; // L'email du destinataire du message, par défaut vide
  String? date; // La date du message, par défaut la date et l'heure actuelles

  // Le constructeur de la classe, avec des paramètres nommés et des valeurs par défaut
  MessagesEFA({
    this.id = "",
    this.contenu = "",
    this.expediteur = "",
    this.destinataire = "",
    this.date = DateTime.now().toString(),
  });
}

// Une fonction qui permet de récupérer tous les messages (avec ID) de la collection
Future<List<MessagesEFA>> recupererTousLesMessages() async {
  // Créer une liste vide pour stocker les messages
  List<MessagesEFA> messages = [];
  try {
    // Créer une référence à la collection messages
    CollectionReference colRef =
        FirebaseFirestore.instance.collection('messages');
    // Obtenir tous les documents de la collection
    QuerySnapshot querySnap = await colRef.get();
    // Parcourir tous les documents
    for (DocumentSnapshot docSnap in querySnap.docs) {
      // Extraire les données du document
      Map<String, dynamic> data = docSnap.data() as Map<String, dynamic>;
      // Créer un objet MessagesEFA à partir des données
      MessagesEFA message = MessagesEFA(
        id: docSnap.id, // Obtenir l'ID du document
        contenu: data['contenu'],
        expediteur: data['expediteur'],
        destinataire: data['destinataire'],
        date: data['date'],
      );
      // Ajouter l'objet MessagesEFA à la liste
      messages.add(message);
    }
    // Retourner la liste des messages
    return messages;
  } catch (e) {
    // Afficher un message d'erreur
    print("Une erreur s'est produite: $e");
    // Retourner une liste vide
    return messages;
  }
}

// Une fonction qui permet de supprimer un message dont on connait l'ID
Future<void> supprimerMessage(String id) async {
  try {
    // Créer une référence au document correspondant à l'ID
    DocumentReference docRef =
        FirebaseFirestore.instance.collection('messages').doc(id);
    // Supprimer le document
    await docRef.delete();
    // Afficher un message de succès
    print("Le message a été supprimé avec succès");
  } catch (e) {
    // Afficher un message d'erreur
    print("Une erreur s'est produite: $e");
  }
}
