
// Une fonction qui permet d'incrémenter le nombre de parrainage d'un utilisateur
Future<void> incrementerNbParrainage(String email) async {
  try {
    // Créer une référence au document correspondant à l'email
    DocumentReference docRef =
        FirebaseFirestore.instance.collection('utilisateurs').doc(email);
    // Incrémenter le champ nb_parrainage du document avec la valeur 1
    await docRef.update({'nb_parrainage': FieldValue.increment(1)});
    // Afficher un message de succès
    print("Le nombre de parrainage a été incrémenté avec succès");
  } catch (e) {
    // Afficher un message d'erreur
    print("Une erreur s'est produite: $e");
  }
}

// Une fonction qui permet de mettre un email comme email de parrain à un utilisateur
Future<void> mettreEmailParrain(String email, String emailParrain) async {
  try {
    // Créer une référence au document correspondant à l'email
    DocumentReference docRef =
        FirebaseFirestore.instance.collection('utilisateurs').doc(email);
    // Mettre à jour le champ email_parrain du document avec la valeur emailParrain
    await docRef.update({'email_parrain': emailParrain});
    // Afficher un message de succès
    print("L'email de parrain a été mis à jour avec succès");
  } catch (e) {
    // Afficher un message d'erreur
    print("Une erreur s'est produite: $e");
  }
}

// Une fonction qui permet de récupérer un utilisateur dont le code de parrainage est donné en paramètre
Future<USER> recupererUtilisateurParCodeParrainage(
    String codeParrainage) async {
  // Créer un objet USER vide
  USER utilisateur = USER();
  try {
    // Créer une référence à la collection utilisateurs
    CollectionReference colRef =
        FirebaseFirestore.instance.collection('utilisateurs');
    // Obtenir le document de la collection qui correspond au code de parrainage
    QuerySnapshot querySnap = await colRef
        .where('codeParrainage', isEqualTo: codeParrainage)
        .limit(1)
        .get();
    // Vérifier si le document existe
    if (querySnap.size > 0) {
      // Extraire les données du document
      Map<String, dynamic> data =
          querySnap.docs[0].data() as Map<String, dynamic>;
      // Créer un objet USER à partir des données
      utilisateur = USER(
        uid: data['uid'],
        email: data['email'],
        codeParrainage: data['codeParrainage'],
        email_parrain: data['email_parrain'],
        est_parrainee: data['est_parrainee'],
        nb_parrainage: data['nb_parrainage'],
        soldeBchain: data['soldeBchain'],
        soldeHiving: data['soldeHiving'],
        tel: data['tel'],
      );
    } else {
      // Si le document n'existe pas, afficher un message d'erreur
      print("Le code de parrainage n'est pas valide");
    }
    // Retourner l'objet USER
    return utilisateur;
  } catch (e) {
    // Afficher un message d'erreur
    print("Une erreur s'est produite: $e");
    // Retourner un objet USER vide
    return utilisateur;
  }
}

// Une fonction qui permet d'attribuer un parrain à un utilisateur dont l'email est donné en paramètre et le code de parrainage du parrain
Future<void> parrainer(String email, String codeParrainage) async {
  try {
    // Récupérer l'utilisateur qui correspond à l'email
    USER utilisateur = await recupererUtilisateurParEmail(email);
    // Vérifier si l'utilisateur n'est pas déjà parrainé
    if (utilisateur.est_parrainee == false) {
      // Récupérer l'utilisateur qui correspond au code de parrainage
      USER parrain = await recupererUtilisateurParCodeParrainage(codeParrainage);
      // Vérifier si le parrain existe
      if (parrain.email != null && parrain.email != "") {
        // Mettre l'email du parrain comme email de parrain à l'utilisateur
        await mettreEmailParrain(email, parrain.email!);
        // Incrémenter le nombre de parrainage du parrain
        await incrementerNbParrainage(parrain.email!);
        // Afficher un message de succès
        print("Le parrainage a été effectué avec succès");
      } else {
        // Si le parrain n'existe pas, afficher un message d'erreur
        print("Le code de parrainage n'est pas valide");
      }
    } else {
      // Si l'utilisateur est déjà parrainé, afficher un message d'erreur
      print("L'utilisateur est déjà parrainé");
    }
  } catch (e) {
    // Afficher un message d'erreur
    print("Une erreur s'est produite: $e");
  }
}
